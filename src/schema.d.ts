/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    /** サーバーの状態を確認する */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/projects": {
    /** 企画一覧の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectSummary"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 企画の作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateProject"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedProject"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/export": {
    /** 企画一覧のエクスポート */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/csv": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/me": {
    /** 自分が企画責任者・副企画責任者になっている企画の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/{project_id}": {
    /** 特定のIDの企画の取得 */
    get: {
      parameters: {
        path: {
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDの企画の更新 */
    put: {
      parameters: {
        path: {
          project_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateProject"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDの企画の削除 */
    delete: {
      parameters: {
        path: {
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    /** ユーザー一覧の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["UserSummary"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** ユーザーの作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUser"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedUser"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/export": {
    /** ユーザー一覧のエクスポート */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/csv": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** 自分のユーザーの取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{user_id}": {
    /** 特定のIDのユーザーの取得 */
    get: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDのユーザーの更新 */
    put: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUser"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDのユーザーの削除 */
    delete: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/news": {
    /** ニュース一覧の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["NewsSummary"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** ニュースの作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateNews"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedNews"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/news/{news_id}": {
    /** 特定のIDのニュースの取得 */
    get: {
      parameters: {
        path: {
          news_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["News"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDのニュースの更新 */
    put: {
      parameters: {
        path: {
          news_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateNews"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDのニュースの削除 */
    delete: {
      parameters: {
        path: {
          news_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/files": {
    /** ニュースの添付ファイル一覧の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["FileInfo"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** ファイルの作成 */
    post: {
      parameters: {
        query?: {
          visibility?: "private" | "public";
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": components["schemas"]["CreateFile"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedFile"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/files/{file_id}": {
    /** 特定のIDのファイルの取得 */
    get: {
      parameters: {
        path: {
          file_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["File"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDのファイルの削除 */
    delete: {
      parameters: {
        path: {
          file_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/invitations": {
    /** 招待一覧の取得 */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Invitation"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 招待の作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateInvitation"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedInvitation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/invitations/{invitation_id}": {
    /** 特定のIDの招待の取得 */
    get: {
      parameters: {
        path: {
          invitation_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Invitation"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDの招待の受諾 */
    post: {
      parameters: {
        path: {
          invitation_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 招待の削除 */
    delete: {
      parameters: {
        path: {
          invitation_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/forms": {
    /** 申請一覧の取得 */
    get: {
      parameters: {
        query?: {
          project_id?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["FormSummary"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 申請の作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateForm"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedForm"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/forms/{form_id}": {
    /** 特定のIDの申請を取得 */
    get: {
      parameters: {
        path: {
          form_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Form"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDの申請を更新 */
    put: {
      parameters: {
        path: {
          form_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateForm"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 特定のIDの申請を削除 */
    delete: {
      parameters: {
        path: {
          form_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/form-answers": {
    /** 申請の回答一覧を取得 */
    get: {
      parameters: {
        query?: {
          project_id?: string;
          form_id?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["FormAnswerSummary"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 申請の回答を作成 */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateFormAnswer"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreatedFormAnswer"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/form-answers/{form_answer_id}": {
    /** 申請の回答を取得 */
    get: {
      parameters: {
        path: {
          form_answer_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["FormAnswer"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** 申請の回答を更新 */
    put: {
      parameters: {
        path: {
          form_answer_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateFormAnswer"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/project-application-period": {
    /** 企画募集期間を取得する */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectApplicationPeriod"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    ProjectCategory:
      | "general"
      | "foods_with_kitchen"
      | "foods_without_kitchen"
      | "foods_without_cooking"
      | "stage_1a"
      | "stage_university_hall"
      | "stage_united";
    /** @enum {string} */
    ProjectAttribute: "academic" | "art" | "official" | "inside" | "outside";
    ProjectSummary: {
      /** Format: uuid */
      id: string;
      /** @example 0 */
      index: number;
      /** @example そぽたん焼き */
      title: string;
      category: components["schemas"]["ProjectCategory"];
      attributes: components["schemas"]["ProjectAttribute"][];
      /** Format: uuid */
      owner_id: string;
      owner_name: string;
      /** Format: email */
      owner_email: string;
    };
    Error: {
      code?: string;
      message?: string;
    };
    CreateProject: {
      /** @example そぽたん焼き */
      title: string;
      /** @example そぽたんやき */
      kana_title: string;
      /** @example そぽたん愛好会 */
      group_name: string;
      /** @example そぽたんあいこうかい */
      kana_group_name: string;
      category: components["schemas"]["ProjectCategory"];
      attributes: components["schemas"]["ProjectAttribute"][];
    };
    CreatedProject: {
      /** Format: uuid */
      id: string;
    };
    Project: {
      /** Format: uuid */
      id: string;
      /** @example 0 */
      index: number;
      /** @example そぽたん焼き */
      title: string;
      /** @example そぽたんやき */
      kana_title: string;
      /** @example そぽたん愛好会 */
      group_name: string;
      /** @example そぽたんあいこうかい */
      kana_group_name: string;
      category: components["schemas"]["ProjectCategory"];
      attributes: components["schemas"]["ProjectAttribute"][];
      /** Format: uuid */
      owner_id: string;
      owner_name: string;
      owner_email: string;
      /** Format: uuid */
      sub_owner_id?: string | null;
      sub_owner_name?: string | null;
      sub_owner_email?: string | null;
      remarks?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    UpdateProject: {
      /** @example そぽたん焼き */
      title: string;
      /** @example そぽたんやき */
      kana_title: string;
      /** @example そぽたん愛好会 */
      group_name: string;
      /** @example そぽたんあいこうかい */
      kana_group_name: string;
      /** @example foods_with_kitchen */
      category: components["schemas"]["ProjectCategory"];
      attributes: components["schemas"]["ProjectAttribute"][];
      remarks?: string | null;
    };
    /** @enum {string} */
    UserRole: "administrator" | "committee_operator" | "committee" | "general";
    UserSummary: {
      id: string;
      name: string;
      /** Format: email */
      email: string;
      role: components["schemas"]["UserRole"];
    };
    CreateUser: {
      name: string;
      kana_name: string;
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
      phone_number: string;
    };
    CreatedUser: {
      id: string;
    };
    User: {
      id: string;
      name: string;
      kana_name: string;
      /** Format: email */
      email: string;
      phone_number: string;
      role: components["schemas"]["UserRole"];
      owned_project_id?: string | null;
      owned_project_title?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    UpdateUser: {
      name: string;
      kana_name: string;
      /** Format: email */
      email: string;
      phone_number: string;
      role: components["schemas"]["UserRole"];
    };
    NewsSummary: {
      /** Format: uuid */
      id: string;
      title: string;
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
      /** Format: date-time */
      updated_at: string;
    };
    CreateNews: {
      title: string;
      body: string;
      attachments: string[];
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
    };
    CreatedNews: {
      /** Format: uuid */
      id: string;
    };
    News: {
      /** Format: uuid */
      id: string;
      title: string;
      body: string;
      attachments: string[];
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    UpdateNews: {
      title: string;
      body: string;
      attachments: string[];
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
    };
    FileInfo: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    CreateFile: {
      /** Format: binary */
      file: string;
    };
    CreatedFile: {
      ids?: string[];
      required?: [ids];
    };
    File: {
      /** Format: uuid */
      id: string;
      name: string;
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    Invitation: {
      /** Format: uuid */
      id: string;
      inviter: string;
      inviter_name: string;
      /** Format: uuid */
      project_id: string;
      project_title: string;
      /** @enum {string} */
      position: "owner" | "sub_owner";
      used_by?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    CreateInvitation: {
      /** Format: uuid */
      project_id: string;
      /** @enum {string} */
      position: "owner" | "sub_owner";
    };
    CreatedInvitation: {
      /** Format: uuid */
      id: string;
    };
    FormSummary: {
      /**
       * Format: uuid
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /** @example マイフォーム */
      title: string;
      /** @example これはフォームです */
      description: string;
      /**
       * Format: date-time
       * @example 2024-03-16T09:00:00Z
       */
      starts_at: string;
      /**
       * Format: date-time
       * @example 2024-03-20T18:00:00Z
       */
      ends_at: string;
      /** @description 対象となる企画区分 */
      categories: components["schemas"]["ProjectCategory"][];
      /** @description 対象となる企画属性 */
      attributes: components["schemas"]["ProjectAttribute"][];
      /** Format: uuid */
      answer_id?: string | null;
      /** Format: date-time */
      answered_at?: string | null;
      /**
       * Format: date-time
       * @example 2024-03-15T14:45:00Z
       */
      updated_at: string;
    };
    /** @enum {string} */
    FormItemType: "string" | "int" | "choose_one" | "choose_many" | "file";
    NewFormItem: {
      name: string;
      description: string;
      required: boolean;
      type: components["schemas"]["FormItemType"];
      min?: number | null;
      max?: number | null;
      min_length?: number | null;
      max_length?: number | null;
      min_selection?: number | null;
      max_selection?: number | null;
      /** @example false */
      allow_newline?: boolean | null;
      options?: string[] | null;
      extensions?: string[] | null;
      /** @example 100 */
      limit?: number | null;
    };
    CreateForm: {
      /** @example 新しいフォーム */
      title: string;
      /** @example これは新しいフォームです */
      description: string;
      /**
       * Format: date-time
       * @example 2024-03-16T09:00:00Z
       */
      starts_at: string;
      /**
       * Format: date-time
       * @example 2024-03-20T18:00:00Z
       */
      ends_at: string;
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
      items: components["schemas"]["NewFormItem"][];
      attachments: string[];
    };
    CreatedForm: {
      /** Format: uuid */
      id: string;
    };
    /**
     * @example {
     *   "string": {
     *     "name": "項目1",
     *     "description": "これは項目1です",
     *     "required": true,
     *     "type": "string",
     *     "min_length": 5,
     *     "max_length": 20,
     *     "allow_newline": false
     *   },
     *   "int": {
     *     "name": "項目2",
     *     "description": "これは項目2です",
     *     "required": true,
     *     "type": "int",
     *     "min": 0,
     *     "max": 10
     *   },
     *   "choose_one": {
     *     "name": "項目3",
     *     "description": "これは項目3です",
     *     "required": true,
     *     "type": "choose_one",
     *     "options": [
     *       "オプション1",
     *       "オプション2",
     *       "オプション3"
     *     ]
     *   },
     *   "choose_many": {
     *     "name": "項目4",
     *     "description": "これは項目4です",
     *     "required": true,
     *     "type": "choose_many",
     *     "min_selection": 1,
     *     "max_selection": 3,
     *     "options": [
     *       "オプション1",
     *       "オプション2",
     *       "オプション3"
     *     ]
     *   },
     *   "file": {
     *     "name": "項目5",
     *     "description": "これは項目5です",
     *     "required": true,
     *     "type": "file",
     *     "extensions": [
     *       ".jpg",
     *       ".png"
     *     ],
     *     "limit": 2
     *   }
     * }
     */
    FormItem: {
      /** Format: uuid */
      id: string;
      name: string;
      description: string;
      required: boolean;
      type: components["schemas"]["FormItemType"];
      min?: number | null;
      max?: number | null;
      min_length?: number | null;
      max_length?: number | null;
      min_selection?: number | null;
      max_selection?: number | null;
      /** @example false */
      allow_newline?: boolean | null;
      options?: string[] | null;
      extensions?: string[] | null;
      /** @example 100 */
      limit?: number | null;
    };
    Form: {
      /**
       * Format: uuid
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /** @example マイフォーム */
      title: string;
      /** @example これはフォームです */
      description: string;
      /**
       * Format: date-time
       * @example 2024-03-16T09:00:00Z
       */
      starts_at: string;
      /**
       * Format: date-time
       * @example 2024-03-20T18:00:00Z
       */
      ends_at: string;
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
      items: components["schemas"]["FormItem"][];
      attachments: string[];
      /** Format: uuid */
      answer_id?: string | null;
      /** Format: date-time */
      answered_at?: string | null;
      /**
       * Format: date-time
       * @example 2024-03-15T10:30:00Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2024-03-15T14:45:00Z
       */
      updated_at: string;
      /**
       * Format: date-time
       * @example null
       */
      deleted_at?: string | null;
    };
    UpdateForm: {
      /** @example 更新されたフォーム */
      title: string;
      /** @example これは更新されたフォームです */
      description: string;
      /**
       * Format: date-time
       * @example 2024-03-16T09:00:00Z
       */
      starts_at: string;
      /**
       * Format: date-time
       * @example 2024-03-20T18:00:00Z
       */
      ends_at: string;
      categories: components["schemas"]["ProjectCategory"][];
      attributes: components["schemas"]["ProjectAttribute"][];
      items: components["schemas"]["NewFormItem"][];
      attachments: string[];
    };
    FormAnswerSummary: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      form_id: string;
      form_title: string;
      /** Format: uuid */
      project_id: string;
      project_title: string;
      /** Format: date-time */
      updated_at: string;
    };
    FormAnswerItem: {
      /** Format: uuid */
      item_id: string;
      type: components["schemas"]["FormItemType"];
      value: unknown;
    };
    CreateFormAnswer: {
      /** Format: uuid */
      form_id: string;
      items: components["schemas"]["FormAnswerItem"][];
    };
    CreatedFormAnswer: {
      /** Format: uuid */
      id: string;
    };
    FormAnswer: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      project_id: string;
      project_title: string;
      /** Format: uuid */
      form_id: string;
      form_title: string;
      items: components["schemas"]["FormAnswerItem"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      deleted_at?: string | null;
    };
    UpdateFormAnswer: {
      items: components["schemas"]["FormAnswerItem"];
    };
    ProjectApplicationPeriod: {
      /** Format: date-time */
      start_at: string;
      /** Format: date-time */
      end_at: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
